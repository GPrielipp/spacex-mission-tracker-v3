{"version":3,"sources":["SpaceX-Logo.svg","components/LaunchItem.js","components/MissionKey.js","components/Gear-1s-400px-transparent.gif","components/Spinner.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","Spinner","src","gif","alt","style","margin","display","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","color","client","ApolloClient","uri","cache","InMemoryCache","App","logo","width","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0517aa2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SpaceX-Logo.7556d2df.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\nconst LaunchItem = ({ launch }) => {\n  const {\n    flight_number,\n    mission_name,\n    launch_date_local,\n    launch_success,\n  } = launch;\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success,\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format='DD-MM-YYYY HH:mm'>{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className='col-md-3'>\n          <Link to={`/launch/${flight_number}`} className='btn btn-secondary'>\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React from 'react';\n\nconst MissionKey = () => {\n  return (\n    <div className='my-3'>\n      <p>\n        <span className='px-3 mr-2 bg-success' /> = Success\n        <br />\n        <span className='px-3 mr-2 bg-danger' /> = Failed\n      </p>\n    </div>\n  );\n};\n\nexport default MissionKey;\n","export default __webpack_public_path__ + \"static/media/Gear-1s-400px-transparent.ad41d55e.gif\";","import React from 'react';\nimport gif from './Gear-1s-400px-transparent.gif';\n\nconst Spinner = () => {\n  return (\n    <img\n      src={gif}\n      alt='Loading...'\n      style={{\n        margin: 'auto',\n        display: 'block',\n      }}\n    />\n  );\n};\n\nexport default Spinner;\n","import React, { Fragment } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\nimport Spinner from './Spinner';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n  if (loading) return <Spinner />;\n  if (error) console.log(error);\n\n  return (\n    <Fragment>\n      <h1 className='display-4 my-3'>Launches</h1>\n      <MissionKey />\n      {data.launches.map((launch) => {\n        return (\n          <Fragment>\n            <LaunchItem key={launch.flight_number} launch={launch} />\n          </Fragment>\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default Launches;\n","import React, { Fragment } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Spinner from './Spinner';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nconst Launch = (props) => {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { flight_number },\n  });\n\n  if (loading) return <Spinner />;\n  if (error) console.log(error);\n\n  if (!data) {\n    return (\n      <Fragment>\n        <h1 className='text-danger my-3'>No data found</h1>\n        <Link to='/' className='btn btn-outline-secondary'>\n          Back\n        </Link>\n      </Fragment>\n    );\n  }\n\n  const {\n    mission_name,\n    launch_year,\n    launch_success,\n    launch_date_local,\n    rocket,\n  } = data.launch;\n\n  const { rocket_id, rocket_name, rocket_type } = rocket;\n\n  return (\n    <div className='my-3'>\n      <h1 className='display-4 my-3'>\n        <span style={{ color: '#ffffff' }}>\n          Mission:{' '}\n          <span\n            className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success,\n            })}\n          >\n            {' '}\n            {mission_name}{' '}\n          </span>\n        </span>\n      </h1>\n      <h4 style={{ color: '#ffffff' }} className='mb-3'>\n        Launch Details\n      </h4>\n      <ul className='list-group'>\n        <li className='list-group-item'>Flight Number: {flight_number}</li>\n        <li className='list-group-item'>Launch Year: {launch_year}</li>\n        <li className='list-group-item'>\n          Launch Successful:{' '}\n          <span\n            className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success,\n            })}\n          >\n            {launch_success ? 'Yes' : 'No'}\n          </span>{' '}\n        </li>\n      </ul>\n      <h4 style={{ color: '#ffffff' }} className='my-3'>\n        Rocket Details\n      </h4>\n      <ul className='list-group'>\n        <li className='list-group-item'>Rocket ID: {rocket_id}</li>\n        <li className='list-group-item'>Rocket Name: {rocket_name}</li>\n        <li className='list-group-item'>Rocket Type: {rocket_type}</li>\n      </ul>\n      <Link\n        style={{ color: '#ffffff' }}\n        to='/'\n        className='btn btn-outline-secondary my-2'\n      >\n        Back\n      </Link>\n    </div>\n  );\n};\n\nexport default Launch;\n","import './App.css';\nimport logo from './SpaceX-Logo.svg';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='container'>\n          <img\n            src={logo}\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n            alt='SpaceX logo'\n          />\n          <Route exact path='/' component={Launches} />\n          <Route exact path='/launch/:flight_number' component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}